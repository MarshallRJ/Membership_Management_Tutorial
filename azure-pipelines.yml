# Variable 'artifactName' was defined in the Variables tab
# Agent Queue 'Azure Pipelines' was used with unrecognized Agent Specification, vmImage property must be specified to determine image - https://docs.microsoft.com/en-us/azure/devops/pipelines/agents/hosted?view=azure-devops&tabs=yaml#software
variables:
- name: BuildParameters.solution1
  value: shesha-functional-tests/backend/Boxfusion.SheshaFunctionalTests.sln
- name: BuildParameters.solution2
  value: shesha-framework/shesha-starter/backend/ShaCompanyName.ShaProjectName.sln  
- name: BuildParameters.configuration
  value: release
- name: pack-version
  value: $(Build.BuildNumber)
trigger:
  tags:
    include:
    - '*'
  branches:
    include:
    - releases/*
pool: 
  name: Azure Pipelines
  vmImage: windows-latest
name: 2.0.0.$(BuildID)
stages:
- stage: Build
  displayName: Build Functional Shesha
  jobs:
  - job: Job_1
    displayName: Agent job 1
    pool:
      name: Azure Pipelines
      vmImage: windows-latest
    steps:
    - checkout: self
    - task: UseDotNet@2
      displayName: Use .NET Core sdk 6.x
      inputs:
        version: 6.x
    # - task: DotNetCoreCLI@2
    #   displayName: 'Dotnet Restore'
    #   inputs:
    #     command: restore
    #     projects: $(BuildParameters.solution)
    #     feedsToUse: config
    #     nugetConfigPath: backend/.nuget/NuGet.Config
    - task: Assembly-Info-NetCore@3
      displayName: Set Assembly Manifest Data
      inputs:
        InsertAttributes: true
        GeneratePackageOnBuild: false
        PackageRequireLicenseAcceptance: false
        VersionNumber: $(Build.BuildNumber)
        FileVersionNumber: $(Build.BuildNumber)
        InformationalVersion: $(Build.BuildNumber)
        PackageVersion: $(Build.BuildNumber)

    - task: PowerShell@2
      displayName: Check to establish if this pipeline was triggered from a tag  
      inputs:
        targetType: 'inline'
        script: |
          # Write your PowerShell commands here.
          write-host $(Build.SourceBranch)
          $branch = 'Unknown'
          if ("$(Build.SourceBranch)" -like "*tags*"){
              write-host "Source Branch should be tags here: $(Build.SourceBranch)"
              $branch = Invoke-Expression "git branch -r --contains $(Build.SourceBranch)"
              write-host "##vso[task.setvariable variable=currentBranch]$branch"

              $path = $branch
              $version = Split-Path $path -Leaf
              Write-Host $version

              Set-Variable -Name "pack-version" -Value "$version"
          }
          else{
              write-host "Source Branch should be main or releases here: $(Build.SourceBranch)"            
              write-host "##vso[task.setvariable variable=currentBranch]$(Build.SourceBranch)"
          }
        workingDirectory: '$(System.DefaultWorkingDirectory)'      
    - task: PowerShell@2
      displayName: Output to console the current branch  
      inputs:
        targetType: 'inline'
        script: |
          # Write your PowerShell commands here.
          write-host "The current branch is: $(currentBranch)"
        workingDirectory: '$(System.DefaultWorkingDirectory)'
    - task: PowerShell@2
      displayName: Create a txt file to carry the original branch name to the release pipeline  
      inputs:
        targetType: 'inline'
        script: |
          $variable = '$(currentBranch)'
          $variable | Out-File $(Build.ArtifactStagingDirectory)\branchName.txt
          Get-Content $(Build.ArtifactStagingDirectory)\branchName.txt
    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact: api-info'
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'api-info'
    - task: DotNetCoreCLI@2
      displayName: dotnet build
      inputs:
        projects: $(BuildParameters.solution1)
        arguments: --configuration $(BuildParameters.configuration)
    - task: DotNetCoreCLI@2
      displayName: dotnet pack
      inputs:
        command: 'pack'
        packagesToPack: '**/*.csproj'
        configuration: '$(BuildParameters.configuration)'
        nobuild: true
        versioningScheme: 'byEnvVar'
        versionEnvVar: 'pack-version'
    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact: Nuget packs'  
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'packs'
    - task: DotNetCoreCLI@2
      displayName: dotnet publish
      inputs:
        command: publish
        publishWebProjects: false
        projects: $(BuildParameters.solution1)
        arguments: --configuration $(BuildParameters.configuration) --output $(build.artifactstagingdirectory) --no-build
        zipAfterPublish: false
        modifyOutputPath: false
    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact: functional-shesha-api'
      inputs:
        ArtifactName: functional-shesha-api
- stage: Build
  displayName: Build Starter Shesha
  jobs:
  - job: Job_1
    displayName: Agent job 1
    pool:
      name: Azure Pipelines
      vmImage: windows-latest
    steps:
    - checkout: self
    - task: UseDotNet@2
      displayName: Use .NET Core sdk 6.x
      inputs:
        version: 6.x
    # - task: DotNetCoreCLI@2
    #   displayName: 'Dotnet Restore'
    #   inputs:
    #     command: restore
    #     projects: $(BuildParameters.solution)
    #     feedsToUse: config
    #     nugetConfigPath: backend/.nuget/NuGet.Config
    - task: Assembly-Info-NetCore@3
      displayName: Set Assembly Manifest Data
      inputs:
        InsertAttributes: true
        GeneratePackageOnBuild: false
        PackageRequireLicenseAcceptance: false
        VersionNumber: $(Build.BuildNumber)
        FileVersionNumber: $(Build.BuildNumber)
        InformationalVersion: $(Build.BuildNumber)
        PackageVersion: $(Build.BuildNumber)

    - task: PowerShell@2
      displayName: Check to establish if this pipeline was triggered from a tag  
      inputs:
        targetType: 'inline'
        script: |
          # Write your PowerShell commands here.
          write-host $(Build.SourceBranch)
          $branch = 'Unknown'
          if ("$(Build.SourceBranch)" -like "*tags*"){
              write-host "Source Branch should be tags here: $(Build.SourceBranch)"
              $branch = Invoke-Expression "git branch -r --contains $(Build.SourceBranch)"
              write-host "##vso[task.setvariable variable=currentBranch]$branch"

              $path = $branch
              $version = Split-Path $path -Leaf
              Write-Host $version

              Set-Variable -Name "pack-version" -Value "$version"
          }
          else{
              write-host "Source Branch should be main or releases here: $(Build.SourceBranch)"            
              write-host "##vso[task.setvariable variable=currentBranch]$(Build.SourceBranch)"
          }
        workingDirectory: '$(System.DefaultWorkingDirectory)'      
    - task: PowerShell@2
      displayName: Output to console the current branch  
      inputs:
        targetType: 'inline'
        script: |
          # Write your PowerShell commands here.
          write-host "The current branch is: $(currentBranch)"
        workingDirectory: '$(System.DefaultWorkingDirectory)'
    - task: PowerShell@2
      displayName: Create a txt file to carry the original branch name to the release pipeline  
      inputs:
        targetType: 'inline'
        script: |
          $variable = '$(currentBranch)'
          $variable | Out-File $(Build.ArtifactStagingDirectory)\branchName.txt
          Get-Content $(Build.ArtifactStagingDirectory)\branchName.txt
    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact: api-info'
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'api-info'
    - task: DotNetCoreCLI@2
      displayName: dotnet build
      inputs:
        projects: $(BuildParameters.solution2)
        arguments: --configuration $(BuildParameters.configuration)
    - task: DotNetCoreCLI@2
      displayName: dotnet pack
      inputs:
        command: 'pack'
        packagesToPack: '**/*.csproj'
        configuration: '$(BuildParameters.configuration)'
        nobuild: true
        versioningScheme: 'byEnvVar'
        versionEnvVar: 'pack-version'
    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact: Nuget packs'  
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'packs'
    - task: DotNetCoreCLI@2
      displayName: dotnet publish
      inputs:
        command: publish
        publishWebProjects: false
        projects: $(BuildParameters.solution2)
        arguments: --configuration $(BuildParameters.configuration) --output $(build.artifactstagingdirectory) --no-build
        zipAfterPublish: false
        modifyOutputPath: false
    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact: starter-shesha-api'
      inputs:
        ArtifactName: starter-shesha-api